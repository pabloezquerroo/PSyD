
#include <s3c44b0x.h>
#include <s3cev40.h>
#include <common_types.h>
#include <system.h>
#include <timers.h>
#include <lcd.h>
#include <pbs.h>
#include <keypad.h>
#include <segs.h>
#include <uda1341ts.h>
#include <iis.h>

#define TICKS_PER_SEC (100)

/* Declaración de graficos */

#define NINTENDO   ((uint8 *) 0x0c220000)
#define WIN		   ((uint8 *)0x0c230000)
#define GAME_OVER  ((uint8 *)0x0c240000)
#define LANDSCAPE  ((uint8 *)0x0c250000)
#define FIREMEN    ((uint8 *)0x0c260000)
#define CRASH      ((uint8 *)0x0c260800)
#define DUMMY_0    ((uint8 *)0x0c270000)
#define DUMMY_90   ((uint8 *)0x0c270400)
#define DUMMY_180  ((uint8 *)0x0c270800)
#define DUMMY_270  ((uint8 *)0x0c270C00)
#define LIFE       ((uint8 *)0x0c271000)

/* Declaracion de sonidos */
#define CAMA	   ((int16 *)0x0c280000)
#define MOVE	   ((int16 *)0x0c2a0000)
#define MUERTE	   ((int16 *)0x0c2c0000)

#define CAMA_SIZE	    (6400)
#define MOVE_SIZE     	(6400)
#define MUERTE_SIZE		(102400)



typedef struct plots {
    uint16 x;               // Posición x en donde se pinta el gráfico
    uint16 y;               // Posición y en donde se pinta el gráfico
    uint8 *plot;            // Puntero al BMP que contiene el gráfico
} plots_t;

typedef struct sprite {
    uint16 width;           // Anchura del gráfico en pixeles
    uint16 height;          // Altura del gráfico en pixeles
    uint16 num_plots;       // Número de posiciones diferentes en donde pintar el gráfico
    plots_t plots[];        // Array de posiciones en donde pintar el gráfico
} sprite_t;

const sprite_t firemen = 
{
    64, 32, 3,                      // Los bomberos de tamaño 64x32 se pintan en 3 posiciones distintas
    {
        {  32, 176, FIREMEN },
        { 128, 176, FIREMEN },
        { 224, 176, FIREMEN }
    }
};

const sprite_t dummy = 
{
    32, 32, 19,                    // Los dummies de tamaño 32x32 se pintan en 19 posiciones distintas con 4 formas diferentes que se alternan
    {
        {   0,  64, DUMMY_0   },
        {  16,  96, DUMMY_90  },
        {  32, 128, DUMMY_180 },
        {  48, 160, DUMMY_270 },
        {  64, 128, DUMMY_0   },
        {  80,  96, DUMMY_90  },
        {  96,  64, DUMMY_180 },
        { 112,  96, DUMMY_270 },
        { 128, 128, DUMMY_0   },
        { 144, 160, DUMMY_90  },
        { 160, 128, DUMMY_180 },
        { 176,  96, DUMMY_270 },
        { 192,  64, DUMMY_0   },
        { 208,  96, DUMMY_90  },
        { 224, 128, DUMMY_180 },
        { 240, 160, DUMMY_270 },
        { 256, 128, DUMMY_0   },
        { 272, 96,  DUMMY_90  },
        { 288, 64,  DUMMY_180 }
    }
};

const sprite_t crash = 
{
    64, 32, 3,                     // Los dummies estrellados de tamaño 64x32 se pintan en 3 posiciones distintas
    {
        {   32, 208, CRASH },
        {  128, 208, CRASH },
        {  224, 208, CRASH }
    }
};

const sprite_t life =
{
    16, 16, 3,                    // Los corazones estrellados de tamaño 16x16 se pintan en 3 posiciones distintas
    {
        {   8, 8, LIFE },
        {  24, 8, LIFE },
        {  40, 8, LIFE }
    }
};

/* Declaración de fifo de punteros a funciones */

#define BUFFER_LEN   (512)

typedef void (*pf_t)(void);

typedef struct fifo {
    uint16 head;
    uint16 tail;
    uint16 size;
    pf_t buffer[BUFFER_LEN];
} fifo_t;

void fifo_init( void );
void fifo_enqueue( pf_t pf );
pf_t fifo_dequeue( void );
boolean fifo_is_empty( void );
boolean fifo_is_full( void );

/* Declaración de recursos */

volatile fifo_t fifo;       // Cola de tareas
boolean gameOver;           // Flag de señalización del fin del juego

/* Declaración de variables */

uint8 dummyPos;     // Posición del dummy 
uint16 count;       // Número de dummies salvados
uint8 firemenPos;	// Posición del firemen
uint8 vidas;		// vidas que quedan
uint8 pscancode;	// scan del pulsador
uint8 keyscancode;	// scan del keypad
uint8 vDummy;		// velocidad del dummy
uint8 posCrash;		// posicion_muerte
boolean final;
boolean pause;

/* Declaración de funciones */

void dummy_init( void );                                    // Inicializa la posición del dummy y lo dibuja
void count_init( void );                                    // Inicializa el contador de dummies salvados y lo dibuja
void sprite_plot( sprite_t const *sprite, uint16 pos );     // Dibuja el gráfico en la posición indicada
void sprite_clear( sprite_t const *sprite, uint16 pos );    // Borra el gráfico pintado en la posición indicada

/* Declaración de tareas */

void dummy_move( void );    // Mueve el dummy
void count_inc( void );     // Incrementa el contador de dummies salvados
void dummy_dead( void);		// Comprueba si hay firemen debajo del dummy.
void firemen_move( void );	// Se encarga del movimiento del firemen.
void pantalla_final(void);	// Pantalla de game over.
void efecto_muerte(void);
void sonido_move(void);
void sonido_cama(void);
void reinicio(void);

/* Declaración de RTI */

void isr_tick( void ) __attribute__ ((interrupt ("IRQ")));

/*******************************************************************/

void main( void )
{
    uint8 i;
    pf_t pf;
    sys_init();
    timers_init();
    lcd_init();
    uda1341ts_init();
    iis_init(IIS_POLLING);
    
    uda1341ts_setvol( VOL_MED );

    lcd_on();

    lcd_clear();
    lcd_putWallpaper(NINTENDO);


    /*
    lcd_putWallpaper( LANDSCAPE );              // Dibuja el fondo de la pantalla
    //for( i=0; i<firemen.num_plots; i++ )        // Dibuja los bomberos en todas sus posiciones posibles
	sprite_plot( &firemen, 0 );
	firemenPos=0;
    for( i=0; i<life.num_plots; i++ )           // Dibuja los corazones en todas sus posiciones posibles
        sprite_plot( &life, i ); 
    //for( i=0; i<crash.num_plots; i++ )          // Dibuja los dummies estrellados en todas sus posicionpes posibles
    //   sprite_plot( &crash, i );

    dummy_init();                               // Inicializa las tareas
    count_init();
    
	segs_putchar(vidas); 						//Muestra vidas en el display de 7 segmentos.

	pause=FALSE;
    final = FALSE;
    gameOver = FALSE;

    fifo_init();                                  // Inicializa cola de funciones
    timer0_open_tick( isr_tick, TICKS_PER_SEC );  // Instala isr_tick como RTI del timer0
     */
	fifo_init();
	timer0_open_tick( isr_tick, TICKS_PER_SEC );// Instala isr_tick como RTI del timer0
           
    gameOver = FALSE;
    final=TRUE;
    pause=TRUE;

    fifo_enqueue(reinicio);

    while( !gameOver )
    {
    	sleep();                        // Entra en estado IDLE, sale por interrupción
        while( !fifo_is_empty() )
        {
            pf = fifo_dequeue();
            (*pf)();                    // Las tareas encoladas se ejecutan en esta hebra (background) en orden de encolado
        }

    }
    


    timer0_close();
    while(1);
}

/*******************************************************************/

void dummy_init( void )
{
    dummyPos = 0;          					// Inicializa la posición del dummy...
    vidas = 3;								//Inicializa las vidas restantes.
    vDummy = 50;								//Velocidad normal de dummy
    sprite_plot( &dummy, 0 );               // ... y lo dibuja
}

void dummy_move( void )
{
    sprite_clear( &dummy, dummyPos );       // Borra el dummy de su posición actual
    if( dummyPos == dummy.num_plots-1 )     // Si el dummy ha alcanzado la última posición...
    {
        dummyPos = 0;                       // ... lo coloca en la posición de salida
        fifo_enqueue( count_inc );          // ... incremeta el contador de dummies rescatados 
    } else
        dummyPos++;                         // En caso contrario, avanza su posición
    sprite_plot( &dummy, dummyPos );        // Dibuja el dummy en la nueva posición   
}



void dummy_dead( void ){
	if ((dummyPos==4)||(dummyPos==10)||(dummyPos==16)){
		if(!((firemenPos==0 && dummyPos==4)||(firemenPos==1 && dummyPos==10)||(firemenPos==2 && dummyPos==16))){
			if (dummyPos==4)posCrash=0;
			else if (dummyPos==10)posCrash=1;
			else if (dummyPos==16)posCrash=2;
			sprite_plot(&crash, posCrash);
			fifo_enqueue(efecto_muerte);
			vidas=vidas-1;
			sprite_clear( &dummy, dummyPos );
			sprite_clear( &life, vidas );
	    	segs_putchar(vidas); //Muestra vidas en el display de 7 segmentos.
			dummyPos=0;
		}else{
			fifo_enqueue(sonido_cama);
		}
	}
}

void firemen_move( void ){
	if( pscancode == PB_RIGHT){
		if(firemenPos<2){
			sprite_clear(&firemen, firemenPos);
			firemenPos++;
			sprite_plot(&firemen, firemenPos);
		};
	}else if(pscancode == PB_LEFT){
		if(firemenPos>0){
			sprite_clear(&firemen, firemenPos);
			firemenPos--;
			sprite_plot(&firemen, firemenPos);
		}
	}
}

void pulsadores ( void ){
	static boolean init = TRUE;
	static enum { wait_pdown, scan, wait_pup } state;

	if( init )
	{
		init  = FALSE;
		state = wait_pdown;
	}
	else switch( state )
	{
		case wait_pdown:
			if( pb_pressed() )
				state = scan;
			break;
		case scan:
			pscancode = pb_scan();
			if( pscancode == PB_RIGHT || pscancode == PB_LEFT){
				fifo_enqueue( firemen_move );
			}
			state = wait_pup;
			break;
		case wait_pup:
			if( !pb_pressed() )
				state = wait_pdown;
			break;
	}
}

void keypad ( void ){
	static boolean init = TRUE;
		static enum { wait_keydown, scan, wait_keyup } state;

		if( init )
		{
			init  = FALSE;
			state = wait_keydown;
		}
		else switch( state )
		{
			case wait_keydown:
				if( keypad_pressed() )
					state = scan;
				break;
			case scan:
				keyscancode = keypad_scan();
				if( keyscancode == KEYPAD_KEY0){
					fifo_enqueue( reinicio );
				}else if (keyscancode==KEYPAD_KEY3){
					if(!pause)pause = TRUE;
					else pause=FALSE;
				}
				state = wait_keyup;
				break;
			case wait_keyup:
				if( !keypad_pressed() )
					state = wait_keydown;
				break;
		}
}

void reinicio(){
    uint8 i;

    lcd_clear();
    lcd_putWallpaper( LANDSCAPE );              // Dibuja el fondo de la pantalla
    //for( i=0; i<firemen.num_plots; i++ )        // Dibuja los bomberos en todas sus posiciones posibles
	sprite_plot( &firemen, 0 );
	firemenPos=0;
    for( i=0; i<life.num_plots; i++ )           // Dibuja los corazones en todas sus posiciones posibles
        sprite_plot( &life, i );
    //for( i=0; i<crash.num_plots; i++ )          // Dibuja los dummies estrellados en todas sus posicionpes posibles
    //   sprite_plot( &crash, i );

    dummy_init();                               // Inicializa las tareas
    count_init();


	segs_putchar(vidas); 						//Muestra vidas en el display de 7 segmentos.

	pause=FALSE;
	final = FALSE;
    gameOver = FALSE;

    fifo_init();                                  // Inicializa cola de funciones
    timer0_open_tick( isr_tick, TICKS_PER_SEC );  // Instala isr_tick como RTI del timer0

}

void pantalla_final( void ){
	final = TRUE;
	timer0_close();
	lcd_clear();
	if (vidas==0){
		lcd_putWallpaper( GAME_OVER );
		lcd_puts(45, 7, BLACK, "Pulse keypad 0 para reiniciar");
	}else{
		lcd_putWallpaper( WIN );
        gameOver = TRUE;                    // ... señaliza fin del juego
	}
    timer0_open_tick( isr_tick, TICKS_PER_SEC );  // Instala isr_tick como RTI del timer0
}

void sonido_move(){
	iis_play(MOVE,MOVE_SIZE,FALSE);
}

void sonido_cama(){
	iis_play(CAMA,CAMA_SIZE,FALSE);
}

void efecto_muerte(){
	uint8 i;
	timer0_close();
	iis_play(MUERTE,MUERTE_SIZE,FALSE);
	if (vidas==0){
		fifo_enqueue(pantalla_final);
	}else{
		sprite_clear(&crash, posCrash);
		lcd_putWallpaper(LANDSCAPE);
		sprite_plot(&firemen, firemenPos);
	}

	for( i=0; i<vidas; i++ )           // Dibuja los corazones en todas sus posiciones posibles
		sprite_plot( &life, i );
	lcd_putint_x2( 287, 0, BLACK, count );  // ... y lo dibuja

	timer0_open_tick( isr_tick, TICKS_PER_SEC );  // Instala isr_tick como RTI del timer0


}

/*******************************************************************/

void count_init( void )
{
    count = 0;                              // Inicializa el contador de dummies salvados...
    lcd_putint_x2( 287, 0, BLACK, count );  // ... y lo dibuja
}

void count_inc( void )
{
    count++; // Incrementa el contador de dummies salvados
    lcd_putint_x2( 287, 0, BLACK, count );
    switch(count){
    	case 10:
    		vDummy=40;
    		break;
    	case 20:
    		vDummy=30;
    		break;
    	case 30:
    		fifo_enqueue(pantalla_final);
    		break;
    }
}

/*******************************************************************/

void isr_tick( void )
{   
    static uint16 contTicks    = 50;
    static uint16 cont5ticks    = 5;

    if( !(--cont5ticks) )
	{
		cont5ticks = 5;
		if (!final&&!pause)fifo_enqueue( pulsadores );
		fifo_enqueue(keypad);
	}
    if (!final&&!pause){
		if( !(--contTicks) )
		{
			contTicks = vDummy;
			fifo_enqueue( sonido_move);
			fifo_enqueue( dummy_move );
			fifo_enqueue( dummy_dead );
		}
	}

    I_ISPC = BIT_TIMER0;
};



/*******************************************************************/

extern uint8 lcd_buffer[];

void lcd_putBmp( uint8 *bmp, uint16 x, uint16 y, uint16 xsize, uint16 ysize );
void lcd_clearWindow( uint16 x, uint16 y, uint16 xsize, uint16 ysize );

void sprite_plot( sprite_t const *sprite, uint16 num )
{
    lcd_putBmp( sprite->plots[num].plot, sprite->plots[num].x, sprite->plots[num].y, sprite->width, sprite->height );
}

void sprite_clear( sprite_t const *sprite, uint16 num )
{
    lcd_clearWindow( sprite->plots[num].x, sprite->plots[num].y, sprite->width, sprite->height );
}

/*
** Muestra un BMP de tamaño (xsize, ysize) píxeles en la posición (x,y)
** Esta función es una generalización de lcd_putWallpaper
*/
void lcd_putBmp( uint8 *bmp, uint16 x, uint16 y, uint16 xsize, uint16 ysize )
{
	uint32 headerSize;

	uint16 xSrc, ySrc, yDst;
	uint16 offsetSrc, offsetDst;

	headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);

	bmp = bmp + headerSize; 

	for( ySrc=0, yDst=ysize-1; ySrc<ysize; ySrc++, yDst-- )
	{
		offsetDst = (yDst+y)*LCD_WIDTH/2+x/2;
		offsetSrc = ySrc*xsize/2;
		for( xSrc=0; xSrc<xsize/2; xSrc++ )
			lcd_buffer[offsetDst+xSrc] = ~bmp[offsetSrc+xSrc];
	}
}

/*
** Borra una porción de la pantalla de tamaño (xsize, ysize) píxeles desde la posición (x,y)
** Esta función es una generalización de lcd_clear
*/
void lcd_clearWindow( uint16 x, uint16 y, uint16 xsize, uint16 ysize )
{
	uint16 xi, yi;

	for( yi=y; yi<y+ysize; yi++ )
		for( xi=x; xi<x+xsize; xi++ )
			lcd_putpixel( xi, yi, WHITE );
}

/*******************************************************************/

void fifo_init( void )
{
    fifo.head = 0;
    fifo.tail = 0;
    fifo.size = 0;
}

void fifo_enqueue( pf_t pf )
{
    fifo.buffer[fifo.tail++] = pf;
    if( fifo.tail == BUFFER_LEN )
        fifo.tail = 0;
    INT_DISABLE;
    fifo.size++;
    INT_ENABLE;
}

pf_t fifo_dequeue( void )
{
    pf_t pf;
    
    pf = fifo.buffer[fifo.head++];
    if( fifo.head == BUFFER_LEN )
        fifo.head = 0;
    INT_DISABLE;
    fifo.size--;
    INT_ENABLE;
    return pf;
}

boolean fifo_is_empty( void )
{
    return (fifo.size == 0);
}

boolean fifo_is_full( void )
{
    return (fifo.size == BUFFER_LEN-1);
}

/*******************************************************************/
